/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FormGroup } from "./utils/model";
import { ReactiveFormStatus } from "./utils/types";
export { FormGroup } from "./utils/model";
export { ReactiveFormStatus } from "./utils/types";
export namespace Components {
    interface ReactiveForm {
        "dataAdditionalSelfHosted": any[];
        "dataAttributeName": string;
        "dataDebounceTime": number;
        "dataFormGroup": FormGroup;
    }
    interface TestComponent {
    }
}
export interface ReactiveFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLReactiveFormElement;
}
declare global {
    interface HTMLReactiveFormElementEventMap {
        "valueChanges": any;
        "statusChanges": ReactiveFormStatus;
    }
    interface HTMLReactiveFormElement extends Components.ReactiveForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLReactiveFormElementEventMap>(type: K, listener: (this: HTMLReactiveFormElement, ev: ReactiveFormCustomEvent<HTMLReactiveFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLReactiveFormElementEventMap>(type: K, listener: (this: HTMLReactiveFormElement, ev: ReactiveFormCustomEvent<HTMLReactiveFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLReactiveFormElement: {
        prototype: HTMLReactiveFormElement;
        new (): HTMLReactiveFormElement;
    };
    interface HTMLTestComponentElement extends Components.TestComponent, HTMLStencilElement {
    }
    var HTMLTestComponentElement: {
        prototype: HTMLTestComponentElement;
        new (): HTMLTestComponentElement;
    };
    interface HTMLElementTagNameMap {
        "reactive-form": HTMLReactiveFormElement;
        "test-component": HTMLTestComponentElement;
    }
}
declare namespace LocalJSX {
    interface ReactiveForm {
        "dataAdditionalSelfHosted"?: any[];
        "dataAttributeName"?: string;
        "dataDebounceTime"?: number;
        "dataFormGroup": FormGroup;
        "onStatusChanges"?: (event: ReactiveFormCustomEvent<ReactiveFormStatus>) => void;
        "onValueChanges"?: (event: ReactiveFormCustomEvent<any>) => void;
    }
    interface TestComponent {
    }
    interface IntrinsicElements {
        "reactive-form": ReactiveForm;
        "test-component": TestComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "reactive-form": LocalJSX.ReactiveForm & JSXBase.HTMLAttributes<HTMLReactiveFormElement>;
            "test-component": LocalJSX.TestComponent & JSXBase.HTMLAttributes<HTMLTestComponentElement>;
        }
    }
}
